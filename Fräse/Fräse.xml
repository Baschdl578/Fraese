<?xml version="1.0" encoding="UTF-8"?>
<Scene name_suffix="0" base_name="Fräse" name_space="Scene">
  <Objects>
    <Object name_suffix="0" base_name="Root" name_space="__global__" type="Object" pickable="0" visible="1">
      <Object name_suffix="0" base_name="Headlight" name_space="__global__" type="Light" pickable="0" visible="1" ambient="0.3 0.3 0.3 1" beacon="Headlight_beacon" diffuse="1 1 1 1" lightType="point" on="1" shadow="0" shadowColor="0.1 0.1 0.1 1" shadowType="4096" specular="0.1 0.1 0.1 1">
        <Object name_suffix="0" base_name="Default" name_space="__global__" type="Camera" pickable="0" visible="1" from="0.774515 -1.27048 0.0277393" at="0.771444 0.434109 0.08122" up="0 1 0" scale="1 1 1" cT="0 1 0" cR="0 0 0" do_cT="0" do_cR="0" cT_mode="1" at_dir="0" accept_root="1" near="0.1" far="2500" aspect="1" fov="1.0472">
          <Object name_suffix="0" base_name="Headlight_beacon" name_space="__global__" type="LightBeacon" pickable="0" visible="1" from="0 0 0" at="0 0 -1" up="0 1 0" scale="1 1 1" cT="0 1 0" cR="0 0 0" do_cT="0" do_cR="0" cT_mode="1" at_dir="1" light="Headlight"/>
        </Object>
      </Object>
    </Object>
  </Objects>
  <Rendering frustum_culling="1" occlusion_culling="0" two_sided="1"/>
  <Scripts>
    <Script name_suffix="0" base_name="ParseGCode" name_space="__script__" type="Python" mobile="">
      <core>
	import re
	import VR
	import math
	
	path = VR.Path()
	coordinates = [[0, 0, 0]]
	orientations = [[0, 0, -1]]
	
	regex= re.compile('N.+\sG.+')
	with open(filepath) as file:
		for line in file:
			regexG01 = re.compile('N.+\sG01.*')
			regexG02 = re.compile('N.+\sG02.*')
		
			if regexG01.match(line):
				newX = coordinates[len(coordinates) - 1][0]
				newY = coordinates[len(coordinates) - 1][1]
				newZ = coordinates[len(coordinates) - 1][2]
			
				tmpReg = re.compile('X-?[0-9]+\.?[0-9]*')
				m = tmpReg.search(line)
				if m:
					xCoord = m.group()
					newX = float(xCoord[1:])
				
				tmpReg = re.compile('Y-?[0-9]+\.?[0-9]*')
				m = tmpReg.search(line)
				if m:
					xCoord = m.group()
					newY = float(xCoord[1:])
				
				tmpReg = re.compile('Z-?[0-9]+\.?[0-9]*')
				m = tmpReg.search(line)
				if m:
					xCoord = m.group()
					newZ = float(xCoord[1:])
				
				coordinates.append([newX, newY, newZ])
				orientations.append(len(orientations) - 1)
				
				
			if regexG02.match(line):
				
				oldX = coordinates[len(coordinates) - 1][0]
				oldY = coordinates[len(coordinates) - 1][1]
				oldZ = coordinates[len(coordinates) - 1][2]
				
				newX1 = oldX
				newY1 = oldY
				newZ1 = oldZ
				
				newX2 = oldX
				newY2 = oldY
				newZ2 = oldZ
				
				centerX = oldX
				centerY = oldY
				centerZ = oldZ
				
				tmpReg = re.compile('X-?[0-9]+\.?[0-9]*')
				m = tmpReg.search(line)
				if m:
					coord = m.group()
					newX2 = float(coord[1:])
				
				tmpReg = re.compile('Y-?[0-9]+\.?[0-9]*')
				m = tmpReg.search(line)
				if m:
					coord = m.group()
					newY2 = float(coord[1:])
				
				tmpReg = re.compile('Z-?[0-9]+\.?[0-9]*')
				m = tmpReg.search(line)
				if m:
					coord = m.group()
					newZ2 = float(coord[1:])
					
			
				tmpReg = re.compile('I-?[0-9]+\.?[0-9]*')
				m = tmpReg.search(line)
				if m:
					coord = m.group()
					centerX += float(coord[1:])
					
				tmpReg = re.compile('J-?[0-9]+\.?[0-9]*')
				m = tmpReg.search(line)
				if m:
					coord = m.group()
					centerY += float(coord[1:])
					
				tmpReg = re.compile('K-?[0-9]+\.?[0-9]*')
				m = tmpReg.search(line)
				if m:
					coord = m.group()
					centerZ += float(coord[1:])
					
				#print "\nSet of Coordinates:\n" + str(newX2) + "\n" + str(newY2) + "\n" + str(newZ2) + "\nCenter:\n" + str(centerX) + "\n" + str(centerY) + "\n" + str(centerZ)
				
				#angle = math.acos((((oldX-centerX) * (newX2-centerX)) + ((oldY-centerY) * (newY2-centerY)) + ((oldZ-centerZ) * (newZ2-centerZ))) / (math.sqrt(math.pow((oldX-centerX), 2) + math.pow((oldY-centerY), 2) + math.pow((oldZ-centerZ), 2)) * (math.sqrt(math.pow((newX2-centerX), 2) + math.pow((newY2-centerY), 2) + math.pow((newZ2-centerZ), 2)))))
				#print "Angle: " + str(math.degrees(angle)) + "°"
				
				tmpX = oldX/2 + newX2/2
				tmpY = oldY/2 + newY2/2
				tmpZ = oldZ/2 + newZ2/2
				
				tmpX -= centerX
				tmpY -= centerY
				tmpZ -= centerZ
				
				radius = math.sqrt(math.pow((oldX-centerX), 2) + math.pow((oldY-centerY), 2) + math.pow((oldZ-centerZ), 2))
				factor = radius / math.sqrt(math.pow(tmpX, 2) + math.pow(tmpY, 2) + math.pow(tmpZ, 2))
				
				newX1 = (tmpX * factor) + centerX
				newY1 = (tmpY * factor) + centerY
				newZ1 = (tmpZ * factor) + centerZ
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
</core>
      <arg type="str" value="g_code_Example" name_suffix="0" base_name="filepath" name_space="ParseGCode"/>
    </Script>
    <Script name_suffix="0" base_name="init" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	r = VR.getRoot().find('Headlight')

	class Fraese:
		def __init__(self):
			self.Base = VR.loadGeometry('Base.dae')
			self.LeftDoor = VR.loadGeometry('TrLinks.dae')
			self.RightDoor = VR.loadGeometry('TrRechts.dae')
			self.Arm1 = VR.loadGeometry('Arm1.dae')
			self.Arm2 = VR.loadGeometry('Arm2.dae')
			self.Motor = VR.loadGeometry('Motor.dae')
			r.addChild(self.Base)
			r.addChild(self.LeftDoor)
			r.addChild(self.RightDoor)
			r.addChild(self.Arm1)
			r.addChild(self.Arm2)
			r.addChild(self.Motor)
			
			self.LeftDoor.setFrom([0.34, 0, 0])
			self.RightDoor.setFrom([-0.14, 0, 0])
			
		
		def start(self):
			p1 = VR.Path()
			p2 = VR.Path()
			p1.set([0.34,0,0], [0,0,-1], [0,0,0], [0,0,-1], 2)
			p2.set([-0.14,0,0], [0,0,-1], [0.205,0,0], [0,0,-1], 2)			
			
			self.LeftDoor.animate(p1, 1, 0, True)
			self.RightDoor.animate(p2, 1, 0, True)
						
			
		def stop(self):
			p1 = VR.Path()
			p2 = VR.Path()
			p1.set([0,0,0], [0,0,-1], [0.34,0,0], [0,0,-1], 2)
			p2.set([0.205,0,0], [0,0,-1], [-0.14,0,0], [0,0,-1], 2)			
			
			self.LeftDoor.animate(p1, 1, 0, True)
			self.RightDoor.animate(p2, 1, 0, True)
			
			
		
	if not hasattr(VR, 'fraese'):
		VR.fraese = Fraese()
			
	VR.fraese.start()
</core>
    </Script>
  </Scripts>
  <Sockets/>
  <Background color="0.6 0.6 0.6" path="" type="0"/>
  <Navigation active="Orbit"/>
  <Materials/>
</Scene>
