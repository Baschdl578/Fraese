<?xml version="1.0" encoding="UTF-8"?>
<Scene name_suffix="0" base_name="Fräse" name_space="Scene">
  <Objects>
    <Object name_suffix="0" base_name="Root" name_space="__global__" type="Object" pickable="0" visible="1">
      <Object name_suffix="0" base_name="Headlight" name_space="__global__" type="Light" pickable="0" visible="1" ambient="0.3 0.3 0.3 1" beacon="Headlight_beacon" diffuse="1 1 1 1" lightType="point" on="1" shadow="0" shadowColor="0.1 0.1 0.1 1" shadowType="4096" specular="0.1 0.1 0.1 1">
        <Object name_suffix="0" base_name="Default" name_space="__global__" type="Camera" pickable="0" visible="1" from="0.337695 0.254845 -0.856967" at="0.352669 0.296103 -0.0632228" up="0 1 0" scale="1 1 1" cT="0 1 0" cR="0 0 0" do_cT="0" do_cR="0" cT_mode="1" at_dir="0" accept_root="1" near="0.1" far="2500" aspect="1" fov="1.0472">
          <Object name_suffix="0" base_name="Headlight_beacon" name_space="__global__" type="LightBeacon" pickable="0" visible="1" from="0 0 0" at="0 0 -1" up="0 1 0" scale="1 1 1" cT="0 1 0" cR="0 0 0" do_cT="0" do_cR="0" cT_mode="1" at_dir="1" light="Headlight"/>
        </Object>
      </Object>
    </Object>
  </Objects>
  <Rendering frustum_culling="1" occlusion_culling="0" two_sided="1"/>
  <Scripts>
    <Script name_suffix="0" base_name="FreaseControl" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	import math
	
	Pi = math.pi
	debugDoor = True
	debugdraw = True
	
	_animationTime = 50
	_animationOffset = 0
	
	class FraeseController:
		def __init__(self,r):
			print "initialisiere Fraesenklasse"
			self.parent = r
			VR.fraese_ablegepunkt = [0.325,0.37,0.07]
			#VR.fraese_scale = 0.06
			VR.fraese_scale = 0.095
			#load Geometry
			self.Base = VR.loadGeometry('Base.dae')
			self.LeftDoor = VR.loadGeometry('TrLinks.dae')
			self.RightDoor = VR.loadGeometry('TrRechts.dae')
			self.Arm1 = VR.loadGeometry('Arm1.dae')
			self.Arm2 = VR.loadGeometry('Arm2.dae')
			self.Motor = VR.loadGeometry('Motor.dae')
			r.addChild(self.Base)
			r.addChild(self.LeftDoor)
			r.addChild(self.RightDoor)
			r.addChild(self.Arm1)
			r.addChild(self.Arm2)
			r.addChild(self.Motor)
			
			#Door close (invert will nicht)
			self.p1c = VR.Path()
			self.p1c.set([0.34,0,0], [0,0,-1], [0,1,0],[0,0,0], [0,0,-1], [0,1,0], 2)
			self.p2c = VR.Path()
			self.p2c.set([-0.14,0,0], [0,0,-1], [0,1,0],[0.205,0,0], [0,0,-1], [0,1,0], 2)
			#Door open
			self.p1o = VR.Path()
			self.p1o.set([0,0,0], [0,0,-1], [0.34,0,0], [0,0,-1], 2)
			self.p2o = VR.Path()
			self.p2o.set([0.205,0,0], [0,0,-1], [-0.14,0,0], [0,0,-1], 2) 
	
			self.doorOpen = True
			self.LeftDoor.setFrom([0.34, 0, 0])
			self.RightDoor.setFrom([-0.14, 0, 0])
			
		def startFraese(self,rohling,modell):
			print "Starte Fräsvorgang"
			#rohling positionieren
			rohling.rotate(1,0,0, -Pi)
			rohling.setScale(VR.fraese_scale,VR.fraese_scale,VR.fraese_scale)
			rohling.setFrom(VR.fraese_ablegepunkt)
			self.parent.addChild(rohling)
			
			#fräsen
			self.useDoor()
			if modell == 0:
				self.nextGCode(VR.ParseGCode("NewModell1.nc"))
			else:
				self.nextGCode(VR.ParseGCode("NewModell2.nc")) #noch nicht da

		def nextGCode(self,parser):
			if parser.hasNext():
				print "next Gcode"
				#parsen
				paths = parser.ParseLine()
				if paths is  None:
					print "Error paths empty"
					self.nextGCode(parser)
					return
					
				#returns [p1, p2, p3, pd, loch (None oder True), Zeit]
				#animieren
				self.Motor.animate(paths[0], paths[5], 0, False)
				self.Arm2.animate(paths[1], paths[5], 0, False)
				self.Arm1.animate(paths[2], paths[5], 0, False)
				#debugdraw
				if debugdraw:
					s = VR.Stroke('path')
			
					s.addPath(paths[3])
					b=0.005
					prof = []
					prof.append([-b,0,b])
					prof.append([-b,0,-b])
					prof.append([b,0,-b])
					prof.append([b,0,b])
					s.strokeProfile(prof, True, True)
					self.parent.addChild(s)
				#abtrag
				if paths[4]:
					print "Abtrag"
				#rekursiver Aufruf
				VR.stackCall( self.nextGCode, paths[5] , [parser] )
	
			else:
				self.stop()


		def stop(self,modell,rohling):#fertig - callback an Logistik
			#tür auf
			self.useDoor()
			#Felge erzeugen
			if modell == 0:
				objekt = VR.felge0.duplicate()
			else :
				objekt = VR.felge1.duplicate()
				
			objekt.rotate(1,0,0, -Pi)
			objekt.setScale(VR.fraese_scale,VR.fraese_scale,VR.fraese_scale)
			objekt.setFrom(VR.fraese_ablegepunkt)
			rohling.destroy()
			self.parent.addChild(objekt)
			
			#objekt = VR.log.addProduct(felge)
			#print objekt
			#objekt = felge
			print "Fraesevorgang done, call back Logistik"
			VR.logisticController.fraeseDone(objekt)
					
		def useDoor(self):
			if self.doorOpen and not debugDoor:	
				self.LeftDoor.animate(self.p1c, 1, 0, True)
				self.RightDoor.animate(self.p2c, 1, 0, True)
			else:
				self.LeftDoor.animate(self.p1o, 1, 0, True)
				self.RightDoor.animate(self.p2o, 1, 0, True)
			self.doorOpen = not self.doorOpen
			
		
	if not hasattr(VR, 'fraeseController'):
		VR.fraeseController = FraeseController(root)	

</core>
      <arg type="VRPyGeometryType" value="0" name_suffix="0" base_name="root" name_space="FreaseControl"/>
    </Script>
    <Script name_suffix="0" base_name="ParseGCode" name_space="__script__" type="Python" mobile="">
      <core>
	import re
	import VR
	import math
	
	#notwendeig damit der pfad auch am Fräskopf ist
	debugx = -0.02
	debugy = 0.145
	debugz = -0.12
	
	#Path Scaling
	_XSCALE = 0.0055
	_YSCALE = 0.0055
	_ZSCALE = 0.0055
	_XOFFSET = -0.25
	_YOFFSET = -0.75
	_ZOFFSET = 0.1
	
	#For line maching
	regexG00 = re.compile('G00.*')
	regexG01 = re.compile('G01.*')
	regexG02 = re.compile('G02.*')
	regexG03 = re.compile('G03.*')
	regexG17 = re.compile('G17.*')
	regexG18 = re.compile('G18.*')
	regexG19 = re.compile('G19.*')
	regexOther = re.compile('X-?[0-9]+\.?[0-9]* Y-?[0-9]+\.?[0-9]*.*')
	

			
	class Parser:
		""" nicht nötig in python
		self.lastPos
		self.lastOrient
		self.lines
		self.currentLine
		self.coordinates #array with ALL endpoints (to detect circles)
		self.plane
		"""
		def __init__(self,path):
			self.lastPos = [0,0,0]
			self.lastOrient = [0,0,-1]
			self.currentLine = 0
			self.plane = "Z"
			self.lines = []
			self.coordinates = []
			
			with open(path) as file:
				for line in file:
					if (regexG00.match(line) or regexG01.match(line) or regexG02.match(line) or regexG03.match(line) or regexG17.match(line) or regexG18.match(line) or regexG19.match(line)):
						self.lines.append(line)
					elif regexOther.match(line):
						newLine = self.lines[(len(self.lines) - 1)][:4] + line
						self.lines.append(newLine)
			
		def hasNext(self):
			if self.currentLine &gt; len(self.lines):
				return False
			return True
			
		def ParseLine(self):
		#returns [p1, p2, p3, pd, loch (None oder True), Zeit]
			line = self.lines[self.currentLine]
			print line
			p1 = VR.Path()
			p2 = VR.Path()
			p3 = VR.Path()
			pd = VR.Path()
			p1.addPoint(self.lastPos, self.lastOrient, [0,0,0], [0,0,0])
			p2.addPoint([self.lastPos[0], self.lastPos[1], 0], self.lastOrient, [0,0,0], [0,0,0])
			p3.addPoint([self.lastPos[0], 0, 0], self.lastOrient, [0,0,0], [0,0,0])
			pd.addPoint([self.lastPos[0]+debugx, self.lastPos[1]+debugy, self.lastPos[2]+debugz], self.lastOrient, [0,0,0], [0,0,0])
			
			#reset after last line
			if self.currentLine &gt; (len(self.lines) - 1):
				print "Reset"
				p1.addPoint([0,0,0], self.lastOrient, [0,0,0], [0,0,0])
				p2.addPoint([0,0,0], self.lastOrient, [0,0,0], [0,0,0])
				p3.addPoint([0,0,0], self.lastOrient, [0,0,0], [0,0,0])
				pd.addPoint([0,0,0], self.lastOrient, [0,0,0], [0,0,0])
				out = [p1,p2,p3,pd,None,1]
			
			self.currentLine += 1
			
			if regexG00.match(line):
				newX = self.lastPos[0]
				newY = self.lastPos[1]
				newZ = self.lastPos[2]
		
				tmpReg = re.compile('X-?[0-9]+\.?[0-9]*')
				m = tmpReg.search(line)
				if m:
					xCoord = m.group()
					newX = float(xCoord[1:]) * _XSCALE + _XOFFSET
			
				tmpReg = re.compile('Y-?[0-9]+\.?[0-9]*')
				m = tmpReg.search(line)
				if m:
					xCoord = m.group()
					newY = float(xCoord[1:]) * _YSCALE + _YOFFSET
			
				tmpReg = re.compile('Z-?[0-9]+\.?[0-9]*')
				m = tmpReg.search(line)
				if m:
					xCoord = m.group()
					newZ = -(float(xCoord[1:]) * _ZSCALE) + _ZOFFSET
			
				p1.addPoint([newX, newY, newZ], self.lastOrient, [0,0,0], [0,0,0])
				p2.addPoint([newX, newY, 0], self.lastOrient, [0,0,0], [0,0,0])
				p3.addPoint([newX, 0, 0], self.lastOrient, [0,0,0], [0,0,0])
				pd.addPoint([newX+debugx, newY+debugy, newZ+debugz], self.lastOrient, [0,0,0], [0,0,0])
				
				p1.compute(2)
				p2.compute(2)
				p3.compute(2)
				pd.compute(2)
				
				loch = None
				
				for coords in self.coordinates:
					if coords == [newX, newY, newZ]:
						loch = True
				
				self.coordinates.append([newX, newY, newZ])
				self.lastPos = [newX, newY, newZ]
				out = [p1, p2, p3, pd, loch, 1]
				
				return out
				
			if regexG01.match(line):
				newX = self.lastPos[0]
				newY = self.lastPos[1]
				newZ = self.lastPos[2]
		
				tmpReg = re.compile('X-?[0-9]+\.?[0-9]*')
				m = tmpReg.search(line)
				if m:
					xCoord = m.group()
					newX = float(xCoord[1:]) * _XSCALE + _XOFFSET
			
				tmpReg = re.compile('Y-?[0-9]+\.?[0-9]*')
				m = tmpReg.search(line)
				if m:
					xCoord = m.group()
					newY = float(xCoord[1:]) * _YSCALE + _YOFFSET
			
				tmpReg = re.compile('Z-?[0-9]+\.?[0-9]*')
				m = tmpReg.search(line)
				if m:
					xCoord = m.group()
					newZ = -(float(xCoord[1:]) * _ZSCALE) + _ZOFFSET
			
				p1.addPoint([newX, newY, newZ], self.lastOrient, [0,0,0], [0,0,0])
				p2.addPoint([newX, newY, 0], self.lastOrient, [0,0,0], [0,0,0])
				p3.addPoint([newX, 0, 0], self.lastOrient, [0,0,0], [0,0,0])
				pd.addPoint([newX+debugx, newY+debugy, newZ+debugz], self.lastOrient, [0,0,0], [0,0,0])
				
				p1.compute(2)
				p2.compute(2)
				p3.compute(2)
				pd.compute(2)
				
				loch = None
				
				for coords in self.coordinates:
					if coords == [newX, newY, newZ]:
						loch = True
				
				self.coordinates.append([newX, newY, newZ])
				self.lastPos = [newX, newY, newZ]
				out = [p1, p2, p3, pd, loch, 1.5]
				
				return out
		
		
			if regexG17.match(line):
				self.plane = "Z"
			
			if regexG18.match(line):
				self.plane = "Y"
			
			if regexG19.match(line):
				self.plane = "X"
		
			if regexG02.match(line):
				newX = 0
				newY = 0
				newZ = 0
				
				centerX = self.lastPos[0]
				centerY = self.lastPos[1]
				centerZ = self.lastPos[2]
			
				tmpReg = re.compile('X-?[0-9]+\.?[0-9]*')
				m = tmpReg.search(line)
				if m:
					coord = m.group()
					newX = float(coord[1:]) * _XSCALE + _XOFFSET
			
				tmpReg = re.compile('Y-?[0-9]+\.?[0-9]*')
				m = tmpReg.search(line)
				if m:
					coord = m.group()
					newY = float(coord[1:]) * _YSCALE + _YOFFSET
			
				tmpReg = re.compile('Z-?[0-9]+\.?[0-9]*')
				m = tmpReg.search(line)
				if m:
					coord = m.group()
					newZ = -(float(coord[1:]) * _ZSCALE) + _ZOFFSET
				
		
				tmpReg = re.compile('I-?[0-9]+\.?[0-9]*')
				m = tmpReg.search(line)
				if m:
					coord = m.group()
					centerX += (float(coord[1:]) * _XSCALE)
					
				tmpReg = re.compile('J-?[0-9]+\.?[0-9]*')
				m = tmpReg.search(line)
				if m:
					coord = m.group()
					centerY += (float(coord[1:]) * _YSCALE)
				
				tmpReg = re.compile('K-?[0-9]+\.?[0-9]*')
				m = tmpReg.search(line)
				if m:
					coord = m.group()
					centerZ += -(float(coord[1:]) * _ZSCALE)
					
					
				radius = math.sqrt(math.pow((self.lastPos[0]-centerX), 2) + math.pow((self.lastPos[1]-centerY), 2) + math.pow((self.lastPos[2]-centerZ), 2))
				angle = math.degrees(math.acos((((self.lastPos[0]-centerX) * (newX-centerX)) + ((self.lastPos[1]-centerY) * (newY-centerY)) + ((self.lastPos[2]-centerZ) * (newZ-centerZ))) / (math.sqrt(math.pow((self.lastPos[0]-centerX), 2) + math.pow((self.lastPos[1]-centerY), 2) + math.pow((self.lastPos[2]-centerZ), 2)) * (math.sqrt(math.pow((newX-centerX), 2) + math.pow((newY-centerY), 2) + math.pow((newZ-centerZ), 2))))))
				
				orientation = []
				
				if self.plane == "Z":
					tmpAngle = math.atan(abs((self.lastPos[1]-centerY)/(self.lastPos[0]-centerX))) + math.radians(angle + 90)
					orientation = [math.sin(tmpAngle), math.cos(tmpAngle), self.lastOrient[2]]

				if self.plane == "Y":
					tmpAngle = math.atan(abs((self.lastPos[2]-centerZ)/(self.lastPos[0]-centerX))) + math.radians(angle + 90)
					orientation = [math.sin(tmpAngle), self.lastOrtient[1], math.cos(tmpAngle)]
					
				if self.plane == "X":
					tmpAngle = math.atan(abs((self.lastPos[1]-centerY)/(self.lastPos[2]-centerZ))) + math.radians(angle + 90)
					orientation = [self.lastOrient[0], math.sin(tmpAngle), math.cos(tmpAngle)]

				loch = None
				
				for coords in self.coordinates:
					if coords == [newX, newY, newZ]:
						loch = True
						
				self.coordinates.append([newX, newY, newZ])
				
				p1.addPoint([newX, newY, newZ], orientation, [0,0,0], [0,0,0])
				p2.addPoint([newX, newY, 0], orientation, [0,0,0], [0,0,0])
				p3.addPoint([newX, 0, 0], orientation, [0,0,0], [0,0,0])
				pd.addPoint([newX+debugx, newY+debugy, newZ+debugz], orientation, [0,0,0], [0,0,0])
				
				p1.compute(3)
				p2.compute(3)
				p3.compute(3)
				pd.compute(3)
				
				self.lastPos = [newX, newY, newZ]
				out = [p1, p2, p3, pd, loch, 2]
				
				return out
			
			
			if regexG03.match(line):
				newX = 0
				newY = 0
				newZ = 0
				
				centerX = self.lastPos[0]
				centerY = self.lastPos[1]
				centerZ = self.lastPos[2]
			
				tmpReg = re.compile('X-?[0-9]+\.?[0-9]*')
				m = tmpReg.search(line)
				if m:
					coord = m.group()
					newX = float(coord[1:]) * _XSCALE + _XOFFSET
			
				tmpReg = re.compile('Y-?[0-9]+\.?[0-9]*')
				m = tmpReg.search(line)
				if m:
					coord = m.group()
					newY = float(coord[1:]) * _YSCALE + _YOFFSET
			
				tmpReg = re.compile('Z-?[0-9]+\.?[0-9]*')
				m = tmpReg.search(line)
				if m:
					coord = m.group()
					newZ = -(float(coord[1:]) * _ZSCALE) + _ZOFFSET
				
		
				tmpReg = re.compile('I-?[0-9]+\.?[0-9]*')
				m = tmpReg.search(line)
				if m:
					coord = m.group()
					centerX += (float(coord[1:]) * _XSCALE)
					
				tmpReg = re.compile('J-?[0-9]+\.?[0-9]*')
				m = tmpReg.search(line)
				if m:
					coord = m.group()
					centerY += (float(coord[1:]) * _YSCALE)
				
				tmpReg = re.compile('K-?[0-9]+\.?[0-9]*')
				m = tmpReg.search(line)
				if m:
					coord = m.group()
					centerZ += -(float(coord[1:]) * _ZSCALE)
					
					
				radius = math.sqrt(math.pow((self.lastPos[0]-centerX), 2) + math.pow((self.lastPos[1]-centerY), 2) + math.pow((self.lastPos[2]-centerZ), 2))
				angle = math.degrees(math.acos((((self.lastPos[0]-centerX) * (newX-centerX)) + ((self.lastPos[1]-centerY) * (newY-centerY)) + ((self.lastPos[2]-centerZ) * (newZ-centerZ))) / (math.sqrt(math.pow((self.lastPos[0]-centerX), 2) + math.pow((self.lastPos[1]-centerY), 2) + math.pow((self.lastPos[2]-centerZ), 2)) * (math.sqrt(math.pow((newX-centerX), 2) + math.pow((newY-centerY), 2) + math.pow((newZ-centerZ), 2))))))
				
				orientation = []
				
				if self.plane == "Z":
					tmpAngle = math.atan(abs((self.lastPos[1]-centerY)/(self.lastPos[0]-centerX))) + math.radians(angle - 90)
					orientation = [math.sin(tmpAngle), math.cos(tmpAngle), self.lastOrient[2]]

				if self.plane == "Y":
					tmpAngle = math.atan(abs((self.lastPos[2]-centerZ)/(self.lastPos[0]-centerX))) + math.radians(angle - 90)
					orientation = [math.sin(tmpAngle), self.lastOrtient[1], math.cos(tmpAngle)]
					
				if self.plane == "X":
					tmpAngle = math.atan(abs((self.lastPos[1]-centerY)/(self.lastPos[2]-centerZ))) + math.radians(angle - 90)
					orientation = [self.lastOrient[0], math.sin(tmpAngle), math.cos(tmpAngle)]

				loch = None
				
				for coords in self.coordinates:
					if coords == [newX, newY, newZ]:
						loch = True
						
				self.coordinates.append([newX, newY, newZ])
				
				p1.addPoint([newX, newY, newZ], orientation, [0,0,0], [0,0,0])
				p2.addPoint([newX, newY, 0], orientation, [0,0,0], [0,0,0])
				p3.addPoint([newX, 0, 0], orientation, [0,0,0], [0,0,0])
				pd.addPoint([newX+debugx, newY+debugy, newZ+debugz], orientation, [0,0,0], [0,0,0])
				
				p1.compute(3)
				p2.compute(3)
				p3.compute(3)
				pd.compute(3)
				
				self.lastPos = [newX, newY, newZ]
				out = [p1, p2, p3, pd, loch, 2]
				
				return out
		

	return Parser(filepath)



				
		
		
</core>
      <arg type="str" value="NewModell1.nc" name_suffix="0" base_name="filepath" name_space="ParseGCode"/>
    </Script>
    <Script name_suffix="0" base_name="init" name_space="__script__" type="Python" mobile="">
      <core>
	import VR

	class LC:
		def fraeseDone(self,object):
			print "Callback done"
		
	VR.logisticController = LC()

	rohling = VR.loadGeometry('rimSaab_Rohling.dae')

	VR.felge0 = VR.loadGeometry('rim_saab.dae')
	VR.felge1 = VR.loadGeometry('rim_saab.dae')
	
	VR.FreaseControl(VR.getRoot().find('Headlight'))
	VR.fraeseController.startFraese(rohling,0)

</core>
      <trig type="on_scene_load" dev="" state="Pressed" param="" key="0" name_suffix="0" base_name="trigger" name_space="__global__"/>
    </Script>
  </Scripts>
  <Sockets/>
  <Background color="0.6 0.6 0.6" path="" type="0"/>
  <Navigation active="Orbit"/>
  <Materials/>
</Scene>
